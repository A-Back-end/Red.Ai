#!/usr/bin/env python3
"""
Azure OpenAI Configuration Setup Script for Red.AI
This script helps users configure and test their Azure OpenAI connection.
"""

import os
import sys
import json
from pathlib import Path

def main():
    print("ü§ñ Red.AI Azure OpenAI Configuration Setup")
    print("=" * 50)
    
    # Check if .env file exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ Found existing .env file")
        choice = input("Do you want to update the existing configuration? (y/N): ")
        if choice.lower() != 'y':
            print("Configuration cancelled.")
            return
    else:
        print("üìù Creating new .env file")
    
    # Collect configuration from user
    config = {}
    
    print("\nüìã Please provide your Azure OpenAI configuration:")
    print("   (You can find these in Azure Portal > Azure OpenAI > Keys and Endpoint)")
    
    # Get endpoint
    endpoint = input("\nüîó Azure OpenAI Endpoint (e.g., https://your-resource.openai.azure.com/): ").strip()
    if not endpoint:
        print("‚ùå Endpoint is required!")
        return
    
    if not endpoint.startswith("https://"):
        endpoint = f"https://{endpoint}"
    
    if not endpoint.endswith("/"):
        endpoint += "/"
    
    config["AZURE_OPENAI_ENDPOINT"] = endpoint
    
    # Get API key
    api_key = input("\nüîë Azure OpenAI API Key: ").strip()
    if not api_key:
        print("‚ùå API Key is required!")
        return
    
    config["AZURE_OPENAI_API_KEY"] = api_key
    
    # Get deployment name
    deployment = input("\nüöÄ Deployment Name (default: gpt-4): ").strip()
    if not deployment:
        deployment = "gpt-4"
    
    config["AZURE_OPENAI_DEPLOYMENT_NAME"] = deployment
    
    # Get API version
    api_version = input("\nüìÖ API Version (default: 2024-02-01): ").strip()
    if not api_version:
        api_version = "2024-02-01"
    
    config["AZURE_OPENAI_API_VERSION"] = api_version
    
    # Optional backup key
    backup_key = input("\nüîë Backup API Key (optional, press Enter to skip): ").strip()
    if backup_key:
        config["AZURE_OPENAI_API_KEY_2"] = backup_key
    
    # Write .env file
    try:
        with open(".env", "w") as f:
            f.write("# Azure OpenAI Configuration for Red.AI\n")
            f.write("# Generated by setup_azure_config.py\n\n")
            
            for key, value in config.items():
                f.write(f"{key}={value}\n")
            
            f.write("\n# Optional: Use Azure AD authentication instead of API keys\n")
            f.write("# USE_AZURE_AD=false\n")
        
        print("\n‚úÖ Configuration saved to .env file")
        
    except Exception as e:
        print(f"\n‚ùå Error saving configuration: {e}")
        return
    
    # Test configuration
    print("\nüß™ Testing Azure OpenAI connection...")
    
    try:
        # Import and test the service
        from azure_openai_service import create_azure_openai_service
        
        service = create_azure_openai_service()
        
        if service.is_configured():
            print("‚úÖ Azure OpenAI service configured successfully!")
            
            # Show service info
            info = service.get_service_info()
            print("\nüìä Service Information:")
            print(f"   Endpoint: {info['endpoint']}")
            print(f"   API Version: {info['api_version']}")
            print(f"   Deployment: {info['deployment_name']}")
            print(f"   Has API Key: {info['has_api_key']}")
            
            # Optional: Test a simple request
            test_request = input("\nüî¨ Test with a simple AI request? (y/N): ")
            if test_request.lower() == 'y':
                try:
                    response = service.generate_chat_response("Hello, this is a test message.")
                    if response:
                        print("‚úÖ Test request successful!")
                        print(f"   Response: {response[:100]}...")
                    else:
                        print("‚ö†Ô∏è  Test request completed but no response received")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Test request failed: {e}")
                    print("   Configuration is correct, but there might be network or quota issues")
        else:
            print("‚ùå Azure OpenAI service configuration is invalid")
            print("   Please check your credentials and try again")
            
    except ImportError as e:
        print(f"‚ö†Ô∏è  Cannot import Azure OpenAI service: {e}")
        print("   Please make sure you're in the backend directory and dependencies are installed")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error testing configuration: {e}")
    
    print("\nüéâ Setup complete!")
    print("   You can now run the Red.AI backend with: python main.py")
    print("   Or start the full stack with: docker-compose up")

if __name__ == "__main__":
    main() 