import * as fs from 'fs'
import * as path from 'path'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
interface SaveImageResult {
  success: boolean
  localUrl?: string
  filename?: string
  error?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
interface Project {
  id: string
  userId: string
  name: string
  description: string
  imageUrl: string
  originalImageUrl?: string  // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  createdAt: Date | string
  updatedAt: Date | string
  status: string
  generatedImages: string[]
  budget: {
    min: number
    max: number
    currency: string
  }
  preferredStyles: string[]
  restrictions: string[]
  roomAnalysis?: any
  designRecommendation?: any
  threeDModel?: any
  pdfReport?: any
  shoppingList?: any
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
export async function downloadAndSaveImage(imageUrl: string, customFilename?: string): Promise<SaveImageResult> {
  try {
    console.log('üîÑ Starting image download process for:', imageUrl)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —É–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–º
    if (imageUrl.startsWith('/generated-images/') || imageUrl.startsWith('/uploads/')) {
      console.log('‚ÑπÔ∏è  Image is already local, skipping download')
      return {
        success: true,
        localUrl: imageUrl,
        filename: path.basename(imageUrl)
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const saveDir = path.join(process.cwd(), 'public', 'generated-images')
    if (!fs.existsSync(saveDir)) {
      fs.mkdirSync(saveDir, { recursive: true })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now()
    const randomId = Math.random().toString(36).substring(2, 9)
    const filename = customFilename || `saved-image-${timestamp}-${randomId}.png`
    const filePath = path.join(saveDir, filename)

    console.log('üì• Downloading image from URL...')
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    const response = await fetch(imageUrl, {
      signal: controller.signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; RedAI-ImageSaver/1.0)',
      }
    })

    clearTimeout(timeoutId)

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageBuffer = await response.arrayBuffer()
    const buffer = Buffer.from(imageBuffer)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    fs.writeFileSync(filePath, buffer)

    const localUrl = `/generated-images/${filename}`
    
    console.log('‚úÖ Image saved successfully to:', localUrl)
    
    return {
      success: true,
      localUrl: localUrl,
      filename: filename
    }

  } catch (error) {
    console.error('‚ùå Error downloading image:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function readProjects(): Promise<Project[]> {
  try {
    const dbPath = path.join(process.cwd(), 'database', 'projects.json')
    const data = await fs.promises.readFile(dbPath, 'utf-8')
    return JSON.parse(data)
  } catch (error) {
    console.error('Error reading projects:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function writeProjects(projects: Project[]): Promise<void> {
  try {
    const dbPath = path.join(process.cwd(), 'database', 'projects.json')
    await fs.promises.writeFile(dbPath, JSON.stringify(projects, null, 2))
  } catch (error) {
    console.error('Error writing projects:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–æ–≤—ã–º –ª–æ–∫–∞–ª—å–Ω—ã–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function updateProjectWithLocalImage(projectId: string, originalUrl: string): Promise<boolean> {
  try {
    console.log('üîÑ Updating project with local image:', projectId)
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const saveResult = await downloadAndSaveImage(originalUrl)
    
    if (!saveResult.success) {
      console.error('‚ùå Failed to save image:', saveResult.error)
      return false
    }

    // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await readProjects()
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
    const projectIndex = projects.findIndex(p => p.id === projectId)
    if (projectIndex === -1) {
      console.error('‚ùå Project not found:', projectId)
      return false
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = projects[projectIndex]
    const oldImageUrl = project.imageUrl
    project.imageUrl = saveResult.localUrl!
    project.updatedAt = new Date().toISOString()

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ generatedImages
    if (project.generatedImages) {
      const imageIndex = project.generatedImages.findIndex(img => img === oldImageUrl)
      if (imageIndex !== -1) {
        project.generatedImages[imageIndex] = saveResult.localUrl!
      } else {
        project.generatedImages.push(saveResult.localUrl!)
      }
    } else {
      project.generatedImages = [saveResult.localUrl!]
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    await writeProjects(projects)
    
    console.log('‚úÖ Project updated successfully:', projectId)
    console.log('üìÇ Old URL:', oldImageUrl)
    console.log('üìÇ New URL:', saveResult.localUrl)
    
    return true

  } catch (error) {
    console.error('‚ùå Error updating project:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ URL
export async function updateAllProjectsWithLocalImages(): Promise<{ updated: number, failed: number }> {
  try {
    console.log('üîÑ Starting mass update of all projects...')
    
    const projects = await readProjects()
    let updated = 0
    let failed = 0

    for (const project of projects) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
      if (project.imageUrl && !project.imageUrl.startsWith('/generated-images/') && !project.imageUrl.startsWith('/uploads/')) {
        console.log(`üîÑ Processing project: ${project.id}`)
        
        const success = await updateProjectWithLocalImage(project.id, project.imageUrl)
        if (success) {
          updated++
        } else {
          failed++
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }

    console.log(`‚úÖ Mass update completed: ${updated} updated, ${failed} failed`)
    return { updated, failed }

  } catch (error) {
    console.error('‚ùå Error in mass update:', error)
    return { updated: 0, failed: 0 }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤—Ä–µ–º–µ–Ω–Ω—ã–º
export function isTemporaryUrl(url: string): boolean {
  const temporaryDomains = [
    'delivery-eu1.bfl.ai',
    'oaidalleapiprodscus.blob.core.windows.net',
    'cdn.openai.com',
    'dalle-images.com'
  ]
  
  return temporaryDomains.some(domain => url.includes(domain)) || 
         url.includes('?se=') || // Azure blob storage with expiration
         url.includes('?expires=') // Generic expiration parameter
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
export async function ensureImageIsSaved(imageUrl: string): Promise<string> {
  if (isTemporaryUrl(imageUrl)) {
    console.log('‚ö†Ô∏è  Detected temporary URL, saving locally...')
    const result = await downloadAndSaveImage(imageUrl)
    
    if (result.success && result.localUrl) {
      return result.localUrl
    } else {
      console.error('‚ùå Failed to save image, keeping original URL')
      return imageUrl
    }
  }
  
  return imageUrl
} 