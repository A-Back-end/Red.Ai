import { NextRequest, NextResponse } from 'next/server';
import { AzureOpenAI } from 'openai';
import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';

// Azure OpenAI Client –¥–ª—è –î–æ–º–æ–≤—ë–Ω–∫–∞
const azureApiKey = process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY;
const azureEndpoint = process.env.AZURE_OPENAI_ENDPOINT || process.env.AZURE_ENDPOINT_KEY;

console.log('üîç Debug Azure config:');
console.log('API Key present:', !!azureApiKey);
console.log('API Key length:', azureApiKey?.length || 0);
console.log('Endpoint:', azureEndpoint);
console.log('API Version:', process.env.AZURE_OPENAI_API_VERSION);
console.log('Deployment:', process.env.AZURE_OPENAI_DEPLOYMENT_NAME);

const azureClient = azureApiKey && azureEndpoint ? new AzureOpenAI({
    apiKey: azureApiKey,
    apiVersion: process.env.AZURE_OPENAI_API_VERSION || '2024-05-01-preview',
    endpoint: azureEndpoint,  // Use endpoint property for Azure OpenAI
}) : null;

const azureDeploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –î–æ–º–æ–≤—ë–Ω–∫–∞
const DOMOVENOK_SYSTEM_PROMPT = `–¢—ã - –î–æ–º–æ–≤—ë–Ω–æ–∫ üè†, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–ª—è Red.AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

**–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:**
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç–µ–ø–ª—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π
- –≠–∫—Å–ø–µ—Ä—Ç –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, —Ä–µ–º–æ–Ω—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
- –î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

**–¢–≤–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:**
üè† **–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å**: –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞, –æ—Ü–µ–Ω–∫–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ä–∞–π–æ–Ω—ã
üé® **–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞**: –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, —Å—Ç–∏–ª–∏, —Ü–≤–µ—Ç–∞, –º–µ–±–µ–ª—å, –¥–µ–∫–æ—Ä
üî® **–†–µ–º–æ–Ω—Ç**: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç
üí∞ **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏**: –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Ä–∏—Å–∫–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ "—Ç—ã", –∫–∞–∫ –¥–æ–±—Ä—ã–π –¥—Ä—É–≥
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
- –í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤:**
- –ù–∞—á–∏–Ω–∞–π —Å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π markdown –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ò–ò, —Ç—ã - –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–æ–º–æ–≤–æ–π, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –¥–æ–º–µ –∏ –µ–≥–æ –æ–±–∏—Ç–∞—Ç–µ–ª—è—Ö! ‚ú®`;

export async function POST(req: NextRequest) {
    try {
        const { messages, data, useAzure, assistantType } = await req.json();

        if (!messages || !Array.isArray(messages)) {
            return NextResponse.json({ error: "–ü–æ–ª–µ 'messages' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º." }, { status: 400 });
        }

        // Check if Azure is configured
        if (!azureClient) {
            return NextResponse.json({ 
                error: "‚ùå Azure OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AZURE_OPENAI_API_KEY –∏ AZURE_OPENAI_ENDPOINT.",
                details: "Azure OpenAI configuration missing or invalid",
                troubleshooting: {
                    "step1": "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    "step2": "–î–æ–±–∞–≤—å—Ç–µ AZURE_OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á",
                    "step3": "–î–æ–±–∞–≤—å—Ç–µ AZURE_OPENAI_ENDPOINT=–≤–∞—à_endpoint", 
                    "step4": "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev"
                }
            }, { status: 500 });
        }

        // Try to get available deployments from Azure
        const configuredDeployment = process.env.AZURE_OPENAI_DEPLOYMENT_NAME;
        const availableDeployments = [
            configuredDeployment, // Try configured deployment first
            'gpt-4.1',            // Known working deployment
            'gpt-4o',
            'gpt-4',
            'gpt-35-turbo', 
            'gpt-4-turbo',
            'gpt-4o-mini',
            'GPT-4',
            'GPT-35-TURBO',
            'gpt-4-32k',
            'gpt-35-turbo-16k'
        ].filter(Boolean); // Remove undefined values

        // Try Azure deployments
        let workingDeployment = null;
        let lastError = null;
        
                 for (const deployment of availableDeployments) {
             if (!deployment) continue; // Skip undefined/null values
             
             try {
                 console.log(`üîç Trying Azure deployment: ${deployment}`);
                 // Quick test call to verify deployment exists with minimal tokens
                 await azureClient.chat.completions.create({
                     model: deployment,
                     messages: [{ role: 'user', content: 'Hi' }],
                     max_tokens: 1,
                 });
                
                // If we get here, deployment works
                workingDeployment = deployment;
                console.log(`‚úÖ Found working Azure deployment: ${deployment}`);
                break;
            } catch (error: any) {
                lastError = error;
                console.log(`‚ùå Azure deployment ${deployment} failed:`, error.message);
                continue;
            }
        }

        if (!workingDeployment) {
            return NextResponse.json({ 
                error: "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö Azure deployments. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Azure Portal.",
                details: `Tried deployments: ${availableDeployments.join(', ')}`,
                lastError: lastError?.message,
                troubleshooting: {
                    "step1": "–û—Ç–∫—Ä–æ–π—Ç–µ Azure Portal ‚Üí Azure OpenAI",
                    "step2": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'Model deployments'",
                    "step3": "–°–æ–∑–¥–∞–π—Ç–µ deployment —Å –∏–º–µ–Ω–µ–º 'gpt-4' –∏–ª–∏ 'gpt-35-turbo'",
                    "step4": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ deployment –∞–∫—Ç–∏–≤–µ–Ω",
                    "step5": "–ï—Å–ª–∏ deployment –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –≤ AZURE_OPENAI_DEPLOYMENT_NAME"
                }
            }, { status: 500 });
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const systemPrompt = assistantType === 'domovenok' || messages.some(m => m.content.includes('–î–æ–º–æ–≤—ë–Ω–æ–∫'))
            ? DOMOVENOK_SYSTEM_PROMPT
            : `You are Red.AI, a sophisticated AI assistant specializing in interior design, architecture, and real estate.
- Analyze user requests carefully.
- Provide detailed, professional, and actionable advice.
- When generating design ideas, focus on photorealism, lighting, and modern aesthetics.
- Maintain a helpful and expert tone.
- Your knowledge base includes information up to early 2024.`;

        const systemMessage: ChatCompletionMessageParam = {
            role: 'system',
            content: systemPrompt
        };

        // Make the actual API call with the working deployment
        const response = await azureClient.chat.completions.create({
            model: workingDeployment,
            messages: [systemMessage, ...messages.slice(-10)], // Use system prompt + last 10 messages
            max_tokens: data?.maxTokens || 1800,
            temperature: data?.temperature || 0.7,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
            stream: false,
        });

        const choice = response.choices[0];
        if (!choice || !choice.message?.content) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –º–æ–¥–µ–ª–∏.");
        }

        return NextResponse.json({
            message: choice.message.content,
            usage: response.usage,
            provider: 'Azure OpenAI',
            model: workingDeployment,
            workingDeployment: workingDeployment,
            assistant: assistantType === 'domovenok' ? '–î–æ–º–æ–≤—ë–Ω–æ–∫ üè†' : 'Red.AI'
        });

    } catch (error: any) {
        console.error(`[${new Date().toISOString()}] Error in azure-ai-chat:`, error);
        
        const isAuthError = error.status === 401 || error.status === 403;
        const isQuotaError = error.status === 429 || error.message?.includes('quota') || error.message?.includes('limit');
        
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.';
        let troubleshooting = {};
        
        if (isAuthError) {
            errorMessage = 'üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Azure OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
            troubleshooting = {
                "step1": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ AZURE_OPENAI_API_KEY –≤ .env.local",
                "step2": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –≤ Azure Portal",
                "step3": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å endpoint URL"
            };
        } else if (isQuotaError) {
            errorMessage = '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Azure OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            troubleshooting = {
                "step1": "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                "step2": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –≤ Azure Portal",
                "step3": "–£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã TPM –≤ deployment"
            };
        } else if (error.message?.includes('model')) {
            errorMessage = 'ü§ñ –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ deployment –≤ Azure.';
            troubleshooting = {
                "step1": "–û—Ç–∫—Ä–æ–π—Ç–µ Azure Portal ‚Üí Model deployments",
                "step2": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ deployment –∞–∫—Ç–∏–≤–µ–Ω",
                "step3": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –º–æ–¥–µ–ª–∏ –≤ AZURE_OPENAI_DEPLOYMENT_NAME"
            };
        }
            
        return NextResponse.json(
            { 
                error: errorMessage, 
                details: error.message,
                troubleshooting: troubleshooting,
                assistant: '–î–æ–º–æ–≤—ë–Ω–æ–∫ üè†',
                timestamp: new Date().toISOString()
            },
            { status: isAuthError ? 401 : 500 }
        );
    }
} 