#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Clerk –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥
# Development: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç test –∫–ª—é—á–∏ –¥–ª—è localhost
# Production: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç live –∫–ª—é—á–∏ –¥–ª—è redai.site

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo_step() {
    echo -e "${BLUE}üîß $1${NC}"
}

echo_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

echo_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

echo_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Clerk –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥..."

# Development keys (–¥–ª—è localhost)
DEV_PUBLISHABLE_KEY="pk_test_bGVhcm5pbmctamVubmV0LTgzLmNsZXJrLmFjY291bnRzLmRldiQ"
DEV_SECRET_KEY="sk_test_Q4dXsL37jneHgKUCm87G9B80YPPqoZjNyAoqU5kTEu"

# Production keys (–¥–ª—è redai.site)
PROD_PUBLISHABLE_KEY="pk_live_Y2xlcmsucmVkYWkuc2l0ZSQ"
PROD_SECRET_KEY="sk_live_XOBM4dWdsiCF86b4SxGiGMLajYcA2omHPe4Xcn6i9w"

# 1. –°–æ–∑–¥–∞–µ–º .env.development –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
echo_step "–°–æ–∑–¥–∞–Ω–∏–µ .env.development –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
cat > .env.development << 'EOF'
# ==================== Clerk Authentication (DEVELOPMENT) ====================
# Development Clerk Keys - –¥–ª—è localhost
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bGVhcm5pbmctamVubmV0LTgzLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_Q4dXsL37jneHgKUCm87G9B80YPPqoZjNyAoqU5kTEu
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Development settings
NEXT_PUBLIC_CLERK_DISABLE_CAPTCHA=true
CLERK_DISABLE_CAPTCHA=true
NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED=true
CLERK_TELEMETRY_DISABLED=true

# Development URLs
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000/api
EOF

echo_success ".env.development —Å–æ–∑–¥–∞–Ω"

# 2. –°–æ–∑–¥–∞–µ–º .env.production –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
echo_step "–°–æ–∑–¥–∞–Ω–∏–µ .env.production –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
cat > .env.production << 'EOF'
# ==================== Clerk Authentication (PRODUCTION) ====================
# Production Clerk Keys - –¥–ª—è redai.site
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_Y2xlcmsucmVkYWkuc2l0ZSQ
CLERK_SECRET_KEY=sk_live_XOBM4dWdsiCF86b4SxGiGMLajYcA2omHPe4Xcn6i9w
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Production settings
NEXT_PUBLIC_CLERK_FRONTEND_API=clerk.redai.site
CLERK_FRONTEND_API=clerk.redai.site
NEXT_PUBLIC_CLERK_DISABLE_CAPTCHA=true
CLERK_DISABLE_CAPTCHA=true
NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED=true
CLERK_TELEMETRY_DISABLED=true

# Production URLs
NEXT_PUBLIC_APP_URL=https://redai.site
NEXT_PUBLIC_API_URL=https://redai.site/api
EOF

echo_success ".env.production —Å–æ–∑–¥–∞–Ω"

# 3. –û–±–Ω–æ–≤–ª—è–µ–º .env.local –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
echo_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env.local –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
cat > .env.local << 'EOF'
# ==================== Clerk Authentication (LOCAL DEVELOPMENT) ====================
# Development Clerk Keys - –¥–ª—è localhost
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bGVhcm5pbmctamVubmV0LTgzLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_Q4dXsL37jneHgKUCm87G9B80YPPqoZjNyAoqU5kTEu
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Development settings
NEXT_PUBLIC_CLERK_DISABLE_CAPTCHA=true
CLERK_DISABLE_CAPTCHA=true
NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED=true
CLERK_TELEMETRY_DISABLED=true

# Development URLs
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000/api
EOF

echo_success ".env.local –æ–±–Ω–æ–≤–ª–µ–Ω"

# 4. –°–æ–∑–¥–∞–µ–º .env –¥–ª—è Docker
echo_step "–°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è Docker..."
cat > .env << 'EOF'
# ==================== Clerk Authentication (DOCKER DEVELOPMENT) ====================
# Development Clerk Keys - –¥–ª—è Docker localhost
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bGVhcm5pbmctamVubmV0LTgzLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_Q4dXsL37jneHgKUCm87G9B80YPPqoZjNyAoqU5kTEu
CLERK_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# Development settings
NEXT_PUBLIC_CLERK_DISABLE_CAPTCHA=true
CLERK_DISABLE_CAPTCHA=true
NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED=true
CLERK_TELEMETRY_DISABLED=true

# Development URLs
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000/api
EOF

echo_success ".env —Å–æ–∑–¥–∞–Ω"

# 5. –û–±–Ω–æ–≤–ª—è–µ–º middleware.ts –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏
echo_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ middleware.ts..."
cat > middleware.ts << 'EOF'
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';
import { NextResponse } from 'next/server';

// Define public routes that don't require authentication
const isPublicRoute = createRouteMatcher([
  '/',           // Home page
  '/login(.*)',  // Login page and any sub-routes
  '/auth(.*)',   // Auth page and any sub-routes
  '/api/webhooks(.*)', // Webhook endpoints
  '/api/health(.*)', // Health check endpoints
  '/showcase',   // Showcase page
  '/image-generator', // Image generator page
  '/interior-design', // Interior design page
]);

// Define protected routes that require authentication
const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)',
  '/project(.*)',
  '/admin(.*)',
]);

export default clerkMiddleware(async (auth, req) => {
  // Get the host from the request
  const host = req.headers.get('host') || '';
  const isLocalhost = host.includes('localhost') || host.includes('127.0.0.1');
  const isProduction = host.includes('redai.site');
  
  // Check if Clerk is properly configured
  const clerkPublishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
  const isClerkConfigured = clerkPublishableKey && !clerkPublishableKey.includes('your_clerk_publishable_key_here');
  
  // If Clerk is not configured, allow all routes
  if (!isClerkConfigured) {
    console.log('‚ö†Ô∏è Clerk not configured, allowing all routes');
    return NextResponse.next();
  }
  
  // For development (localhost), allow all routes without authentication
  if (isLocalhost) {
    console.log('üîß Development mode: allowing all routes on localhost');
    return NextResponse.next();
  }
  
  // For production, enforce authentication on protected routes
  if (isProduction && isProtectedRoute(req)) {
    try {
      const { userId } = await auth();
      if (!userId) {
        console.log('üîí Production: redirecting to login for protected route');
        return NextResponse.redirect(new URL('/login', req.url));
      }
    } catch (error) {
      console.error('‚ùå Clerk authentication error:', error);
      return NextResponse.redirect(new URL('/login', req.url));
    }
  }
  
  // Allow all other routes to proceed
  return NextResponse.next();
});

export const config = {
  matcher: [
    // Exclude files with a "." followed by an extension, which are typically static files.
    // Exclude files in the _next directory, but allow authentication on _next/data routes.
    // Exclude folders like api/trpc which are handled separately
    '/((?!.*\\..*|_next|api/webhooks|api/health).*)',
    '/',
    '/(api|trpc)(.*)',
  ],
};
EOF

echo_success "middleware.ts –æ–±–Ω–æ–≤–ª–µ–Ω"

# 6. –û–±–Ω–æ–≤–ª—è–µ–º layout.tsx –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ClerkProvider
echo_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ClerkProvider –≤ layout.tsx..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
cat > temp_layout_clerk.tsx << 'EOF'
  return (
    <ClerkProvider
      publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      signInFallbackRedirectUrl="/dashboard"
      signUpFallbackRedirectUrl="/dashboard"
      signInUrl="/login"
      signUpUrl="/login"
      telemetry={false}
      allowedRedirectOrigins={[
        'http://localhost:3000',
        'http://localhost:3001',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:3001',
        'https://redai.site',
        'https://www.redai.site'
      ]}
    >
EOF

echo_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ClerkProvider –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞"

# 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
echo ""

echo "üìã –¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo ""

echo "üîß .env.development:"
if [ -f ".env.development" ]; then
    grep "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" .env.development
else
    echo_error "‚ùå .env.development –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

echo "üîß .env.production:"
if [ -f ".env.production" ]; then
    grep "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" .env.production
else
    echo_error "‚ùå .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

echo "üîß .env.local:"
if [ -f ".env.local" ]; then
    grep "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" .env.local
else
    echo_error "‚ùå .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

echo_success "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Clerk –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
echo ""
echo "üöÄ –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
echo "   npm run dev"
echo "   # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç development –∫–ª—é—á–∏ (pk_test_*)"
echo ""
echo "üê≥ –î–ª—è Docker —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
echo "   docker-compose up"
echo "   # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç development –∫–ª—é—á–∏ (pk_test_*)"
echo ""
echo "üöÄ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:"
echo "   NODE_ENV=production npm run build && npm start"
echo "   # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç production –∫–ª—é—á–∏ (pk_live_*)"
echo ""
echo "üìù –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:"
echo "   1. Development –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å localhost"
echo "   2. Production –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å redai.site"
echo "   3. Middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–µ–¥—É –ø–æ –¥–æ–º–µ–Ω—É"
echo "   4. –í development —Ä–µ–∂–∏–º–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
echo "   5. –í production —Ä–µ–∂–∏–º–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤" 