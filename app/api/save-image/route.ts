import { NextRequest, NextResponse } from 'next/server'
import * as fs from 'fs'
import * as path from 'path'
import { getS3Service } from '@/lib/s3-service'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (S3) –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
export async function POST(request: NextRequest) {
  try {
    console.log('üíæ Starting image download and save process...')
    
    const body = await request.json()
    const { imageUrl, filename } = body
    
    if (!imageUrl) {
      return NextResponse.json(
        { error: 'Image URL is required' },
        { status: 400 }
      )
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å S3 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const s3Service = getS3Service()
    
    if (s3Service && s3Service.isConfigured()) {
      console.log('‚òÅÔ∏è Using AWS S3 for image storage...')
      
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
        const uploadResult = await s3Service.uploadImage(imageUrl, filename)
        
        if (uploadResult.success) {
          console.log('‚úÖ Image uploaded to S3 successfully:', uploadResult.publicUrl)
          
          return NextResponse.json({
            success: true,
            originalUrl: imageUrl,
            localUrl: uploadResult.publicUrl, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ S3 URL
            filename: uploadResult.filename,
            s3Key: uploadResult.s3Key,
            storageType: 's3',
            message: 'Image downloaded and uploaded to S3 successfully'
          })
        } else {
          console.warn('‚ö†Ô∏è S3 upload failed, falling back to local storage:', uploadResult.error)
        }
      } catch (s3Error) {
        console.warn('‚ö†Ô∏è S3 upload error, falling back to local storage:', s3Error)
      }
    } else {
      console.log('‚ö†Ô∏è S3 not configured, using local storage as fallback')
    }

    // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ S3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('üìÅ Using local storage as fallback...')

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const saveDir = path.join(process.cwd(), 'public', 'generated-images')
    if (!fs.existsSync(saveDir)) {
      fs.mkdirSync(saveDir, { recursive: true })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    const timestamp = Date.now()
    const finalFilename = filename || `generated-image-${timestamp}.png`
    const filePath = path.join(saveDir, finalFilename)

    console.log('üì• Downloading image from:', imageUrl)
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const response = await fetch(imageUrl)
    
    if (!response.ok) {
      throw new Error(`Failed to download image: ${response.statusText}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageBuffer = await response.arrayBuffer()
    const buffer = Buffer.from(imageBuffer)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
    fs.writeFileSync(filePath, buffer)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
    const localUrl = `/generated-images/${finalFilename}`
    
    console.log('‚úÖ Image saved locally as fallback to:', localUrl)
    
    return NextResponse.json({
      success: true,
      originalUrl: imageUrl,
      localUrl: localUrl,
      filename: finalFilename,
      storageType: 'local',
      message: 'Image downloaded and saved locally (S3 fallback)'
    })

  } catch (error) {
    console.error('‚ùå Error downloading and saving image:', error)
    return NextResponse.json(
      { 
        error: 'Failed to download and save image',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
} 