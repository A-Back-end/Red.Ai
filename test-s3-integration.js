/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node test-s3-integration.js
 */

const fetch = require('node-fetch')

const API_BASE_URL = 'http://localhost:3000'

// –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–±–æ–ª—å—à–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL)
const TEST_IMAGE_URL = 'https://delivery-eu1.bfl.ai/test-image.png'

async function testS3Integration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n')

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint /api/save-image
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/save-image endpoint...')
    
    const saveResponse = await fetch(`${API_BASE_URL}/api/save-image`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageUrl: TEST_IMAGE_URL,
        filename: 'test-image.png'
      })
    })

    if (!saveResponse.ok) {
      throw new Error(`API returned ${saveResponse.status}: ${saveResponse.statusText}`)
    }

    const result = await saveResponse.json()
    console.log('‚úÖ API Response:', result)

    if (result.success) {
      console.log(`üìÅ Storage Type: ${result.storageType}`)
      console.log(`üîó Saved URL: ${result.localUrl}`)
      
      if (result.storageType === 's3') {
        console.log('‚úÖ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        console.log(`üóÑÔ∏è S3 Key: ${result.s3Key}`)
      } else {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ (fallback)')
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', result.error)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/update-project-images endpoint...')
    
    const analysisResponse = await fetch(`${API_BASE_URL}/api/update-project-images`)
    
    if (!analysisResponse.ok) {
      throw new Error(`Analysis API returned ${analysisResponse.status}`)
    }

    const analysisResult = await analysisResponse.json()
    console.log('‚úÖ Project Analysis:', analysisResult)

    console.log('\n' + '='.repeat(50) + '\n')

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...')
    
    const requiredEnvVars = [
      'AWS_REGION',
      'AWS_ACCESS_KEY_ID', 
      'AWS_SECRET_ACCESS_KEY',
      'AWS_S3_BUCKET_NAME'
    ]

    const envStatus = requiredEnvVars.map(varName => ({
      name: varName,
      configured: !!process.env[varName]
    }))

    envStatus.forEach(env => {
      console.log(`${env.configured ? '‚úÖ' : '‚ùå'} ${env.name}: ${env.configured ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù–ê'}`)
    })

    const allConfigured = envStatus.every(env => env.configured)
    
    if (allConfigured) {
      console.log('\n‚úÖ –í—Å–µ AWS S3 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ AWS S3 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ.')
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    
    if (result.success && result.storageType === 's3') {
      console.log('üéâ AWS S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
      console.log('üì∏ –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ S3')
      console.log('üîó –ù–∏–∫–∞–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç')
    } else if (result.success && result.storageType === 'local') {
      console.log('‚ö†Ô∏è S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ')
      console.log('üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AWS S3 –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã')
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:')
      console.log('   npm run dev')
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
function checkConfiguration() {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n')
  
  const requiredEnvVars = [
    'AWS_REGION',
    'AWS_ACCESS_KEY_ID', 
    'AWS_SECRET_ACCESS_KEY',
    'AWS_S3_BUCKET_NAME'
  ]

  console.log('Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:')
  requiredEnvVars.forEach(varName => {
    const isSet = !!process.env[varName]
    const value = isSet ? `${process.env[varName].substring(0, 10)}...` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'
    console.log(`  ${isSet ? '‚úÖ' : '‚ùå'} ${varName}: ${value}`)
  })

  const allSet = requiredEnvVars.every(varName => !!process.env[varName])
  
  console.log('\n' + '='.repeat(50))
  
  if (allSet) {
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç.')
  } else {
    console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.')
    console.log('\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AWS S3:')
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.production.example –≤ .env.local')
    console.log('2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ AWS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ')
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (process.argv.includes('--config-only')) {
  checkConfiguration()
} else {
  testS3Integration()
}

console.log('\nüìñ –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–º. docs/AWS_S3_SETUP_GUIDE.md') 