import { NextRequest, NextResponse } from 'next/server'
import * as fs from 'fs'
import * as path from 'path'

// Ensure fetch is available globally
if (typeof global.fetch === 'undefined') {
  global.fetch = require('node-fetch')
}

// Azure DALL-E 3 Configuration - using provided credentials
const AZURE_CONFIG = {
  apiKey: 'FM1DHQMuPkCX1TKRnIVVprIoQ1RwI6yaPBNEJ0gx3kdRUNMpprAlJQQJ99BGACYeBjFXJ3w3AAABACOGLuJD',
  endpoint: 'https://neuroflow-hub.openai.azure.com',
  apiVersion: '2024-04-01-preview',
  deploymentName: 'dall-e-3'
}

// Room Analysis Interface (Free tier functionality)
interface RoomAnalysis {
  roomType: string
  style: string
  description: string
  suggestions: string[]
}

interface DesignGenerationRequest {
  prompt: string
  referenceImages?: string[]
  apartmentStyle?: string
  roomType?: string
  design?: string
  designNew?: string
  budgetLevel?: string
  budget?: number
  quality?: 'standard' | 'hd'
  mode?: 'generate' | 'edit'
}

// Generate free design recommendation
function generateFreeDesignRecommendation(roomAnalysis: RoomAnalysis, preferences: any): any {
  const freeRecommendations = {
    colors: ["–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞", "–ë–µ–ª—ã–π –∏ –±–µ–∂–µ–≤—ã–π", "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π"],
    furniture: ["–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å", "–°–∫–ª–∞–¥–Ω—ã–µ —Å—Ç–æ–ª—ã", "–ú–æ–¥—É–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è"],
    budget: ["DIY —Ä–µ—à–µ–Ω–∏—è", "–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫", "–ë—é–¥–∂–µ—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã"],
    tips: ["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–µ—Ä–∫–∞–ª–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è", "–î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —É—é—Ç–∞", "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"]
  }
  
  return {
    analysis: roomAnalysis,
    recommendations: freeRecommendations,
    estimated_cost: "15,000 - 50,000‚ÇΩ",
    timeline: "2-4 –Ω–µ–¥–µ–ª–∏"
  }
}

// Create comprehensive DALL-E prompt using the specified template
function createPremiumInteriorPrompt(
  userPrompt: string, 
  apartmentStyle: string, 
  roomType: string, 
  budgetLevel: string,
  designNew?: string,
  budget?: number
): string {
  // Map apartment styles to descriptive text
  const styleDescriptions: Record<string, string> = {
    'Modern': 'sleek contemporary design with clean lines, premium materials, and minimalist aesthetic',
    'Scandinavian': 'cozy Nordic design with natural wood, white tones, and hygge atmosphere',
    'Industrial': 'urban loft design with exposed brick, metal fixtures, and raw materials',
    'Classic': 'timeless elegant design with refined details and sophisticated elements',
    'Minimalist': 'ultra-clean design with essential elements only and maximum functionality',
    'Bohemian': 'eclectic design with vibrant colors, mixed patterns, and artistic elements',
    'Luxury': 'high-end design with premium materials, elegant finishes, and sophisticated details'
  }

  // Map room types to descriptive text
  const roomDescriptions: Record<string, string> = {
    'Living Room': 'living room with comfortable seating area and entertainment space',
    'Bedroom': 'bedroom with restful sleeping area and personal sanctuary',
    'Kitchen': 'kitchen with functional cooking space and dining area',
    'Bathroom': 'bathroom with spa-like atmosphere and modern fixtures',
    'Dining Room': 'dining room with elegant table setting and entertaining space',
    'Home Office': 'home office with productive workspace and storage solutions',
    'Children Room': 'children room with playful design and safe environment'
  }

  // Map budget levels to ranges
  const budgetRanges: Record<string, string> = {
    'low': '$4,000 and $12,000',
    'medium': '$12,000 and $25,000', 
    'high': '$25,000 and $50,000',
    'luxury': '$50,000 and $100,000'
  }

  const roomDesc = roomDescriptions[roomType] || 'living space'
  const styleDesc = styleDescriptions[apartmentStyle] || 'modern contemporary design'
  const budgetRange = budgetRanges[budgetLevel] || '$12,000 and $25,000'
  const designElement = designNew && designNew !== 'No Design' ? designNew : 'functional and aesthetically pleasing elements'

  // Use the exact template structure provided by the user
  const dallePrompt = `Generate a high-quality, professional interior design image of a ${roomDesc} in a ${styleDesc} aesthetic. The design should incorporate ${designElement}. The overall ambiance should align with a budget between ${budgetRange}, reflecting realistic choices for this price range.

${userPrompt} Ensure the design is 3D/photorealistic based on selection. Consider modern interior design principles and create an inspiring space. Focus on professional lighting, realistic textures, and cohesive color palette. The final image should be well-lit, visually appealing, and inspiring for a renovation project.`

  return dallePrompt
}

// Generate image using Azure DALL-E 3
async function generateWithAzureDalle(prompt: string, quality: string = 'standard'): Promise<{imageUrl: string, revisedPrompt: string}> {
  console.log('üé® Generating image with Azure DALL-E 3...')
  
  if (!AZURE_CONFIG.apiKey) {
    throw new Error('Azure OpenAI API key not configured')
  }

  const requestBody = {
    prompt: prompt,
    style: "vivid",
    quality: quality,
    size: "1024x1024",
    n: 1
  }

  // Fix the endpoint URL format
  const endpoint = `${AZURE_CONFIG.endpoint}/openai/deployments/${AZURE_CONFIG.deploymentName}/images/generations?api-version=${AZURE_CONFIG.apiVersion}`

  console.log('üìù Azure DALL-E Request:', { 
    prompt: prompt.substring(0, 100) + '...',
    quality,
    deployment: AZURE_CONFIG.deploymentName,
    endpoint: endpoint
  })

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'api-key': AZURE_CONFIG.apiKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    })

    console.log('üìä Response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Azure DALL-E 3 API error response:', errorText)
      throw new Error(`Azure DALL-E 3 API error: ${response.status} - ${errorText}`)
    }

    const result = await response.json()
    
    if (!result.data || result.data.length === 0) {
      throw new Error('No image generated by Azure DALL-E 3')
    }

    console.log('‚úÖ Azure DALL-E 3 response received successfully')
    return {
      imageUrl: result.data[0].url,
      revisedPrompt: result.data[0].revised_prompt || prompt
    }
  } catch (fetchError) {
    console.error('üí• Fetch error details:', fetchError)
    throw new Error(`Azure DALL-E 3 request failed: ${fetchError instanceof Error ? fetchError.message : 'Unknown fetch error'}`)
  }
}

// Save image from URL to local file system
async function saveImageToFile(imageUrl: string, filename: string): Promise<string> {
  try {
    const publicDir = path.join(process.cwd(), 'public', 'generated-images')
    
    // Create directory if it doesn't exist
    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true })
    }
    
    // Fetch image from URL
    const response = await fetch(imageUrl)
    if (!response.ok) {
      throw new Error(`Failed to fetch image: ${response.statusText}`)
    }
    
    const imageBuffer = await response.arrayBuffer()
    const filePath = path.join(publicDir, filename)
    
    await fs.promises.writeFile(filePath, Buffer.from(imageBuffer))
    
    return `/generated-images/${filename}`
  } catch (error) {
    console.error('Error saving image:', error)
    throw new Error('Failed to save image')
  }
}

// Generate furniture recommendations based on generated design
function generatePremiumFurniture(style: string, roomType: string, budgetLevel: string, prompt: string) {
  const furnitureDatabase: Record<string, Record<string, any[]>> = {
    Modern: {
      'Living Room': [
        { name: "–ú–æ–¥—É–ª—å–Ω—ã–π –¥–∏–≤–∞–Ω", price: "–æ—Ç 85,000‚ÇΩ", description: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º–∞—è –º–µ–±–µ–ª—å –¥–ª—è –≥–æ—Å—Ç–∏–Ω–æ–π", category: "seating" },
        { name: "–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª", price: "–æ—Ç 25,000‚ÇΩ", description: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞ —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–∂–∫–∞–º–∏", category: "tables" },
        { name: "–¢–í-—Ç—É–º–±–∞", price: "–æ—Ç 40,000‚ÇΩ", description: "–ü–æ–¥–≤–µ—Å–Ω–∞—è —Ç—É–º–±–∞ —Å LED-–ø–æ–¥—Å–≤–µ—Ç–∫–æ–π", category: "storage" }
      ],
      'Bedroom': [
        { name: "–ö—Ä–æ–≤–∞—Ç—å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", price: "–æ—Ç 60,000‚ÇΩ", description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º", category: "beds" },
        { name: "–ü—Ä–∏–∫—Ä–æ–≤–∞—Ç–Ω—ã–µ —Ç—É–º–±—ã", price: "–æ—Ç 15,000‚ÇΩ", description: "–ü–∞—Ä—è—â–∏–µ —Ç—É–º–±—ã —Å LED-–ø–æ–¥—Å–≤–µ—Ç–∫–æ–π", category: "storage" },
        { name: "–ì–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", price: "–æ—Ç 120,000‚ÇΩ", description: "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è", category: "wardrobes" }
      ],
      'Kitchen': [
        { name: "–ö—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä", price: "–æ—Ç 150,000‚ÇΩ", description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è —Å –æ—Å—Ç—Ä–æ–≤–æ–º", category: "kitchen" },
        { name: "–ë–∞—Ä–Ω—ã–µ —Å—Ç—É–ª—å—è", price: "–æ—Ç 20,000‚ÇΩ", description: "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ —Å—Ç—É–ª—å—è –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞", category: "seating" },
        { name: "–û–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª", price: "–æ—Ç 35,000‚ÇΩ", description: "–°—Ç–æ–ª –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞", category: "tables" }
      ]
    },
    Scandinavian: {
      'Living Room': [
        { name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–∏–≤–∞–Ω", price: "–æ—Ç 70,000‚ÇΩ", description: "–°–≤–µ—Ç–ª–æ–µ –¥–µ—Ä–µ–≤–æ, —É—é—Ç–Ω—ã–µ –ø–æ–¥—É—à–∫–∏", category: "seating" },
        { name: "–ö–æ—Ñ–µ–π–Ω—ã–π —Å—Ç–æ–ª–∏–∫", price: "–æ—Ç 18,000‚ÇΩ", description: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã", category: "tables" },
        { name: "–¢–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", price: "–æ—Ç 10,000‚ÇΩ", description: "–ü–ª–µ–¥—ã, –ø–æ–¥—É—à–∫–∏, –∫–æ–≤—Ä—ã", category: "textiles" }
      ],
      'Bedroom': [
        { name: "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å", price: "–æ—Ç 50,000‚ÇΩ", description: "–°–≤–µ—Ç–ª–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞, —É—é—Ç–Ω—ã–π —Å—Ç–∏–ª—å", category: "beds" },
        { name: "–ö–æ–º–æ–¥", price: "–æ—Ç 25,000‚ÇΩ", description: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ", category: "storage" }
      ],
      'Kitchen': [
        { name: "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫—É—Ö–Ω—è", price: "–æ—Ç 120,000‚ÇΩ", description: "–°–≤–µ—Ç–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", category: "kitchen" },
        { name: "–û–±–µ–¥–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞", price: "–æ—Ç 40,000‚ÇΩ", description: "–°—Ç–æ–ª –∏ —Å—Ç—É–ª—å—è –∏–∑ –¥–µ—Ä–µ–≤–∞", category: "dining" }
      ]
    }
  }

  const roomFurniture = furnitureDatabase[style]?.[roomType] || furnitureDatabase.Modern['Living Room']
  return roomFurniture
}

// Generate Pinterest-style design ideas
function generateIntelligentPinterestStyles(style: string, prompt: string) {
  const styles = [
    { name: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º", description: "–ß–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞", image: "/img/style-modern-minimalism.jpg" },
    { name: "–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —É—é—Ç", description: "–°–≤–µ—Ç–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", image: "/img/style-scandinavian.jpg" },
    { name: "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π –ª–æ—Ñ—Ç", description: "–ö–∏—Ä–ø–∏—á, –º–µ—Ç–∞–ª–ª –∏ –≤–∏–Ω—Ç–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", image: "/img/style-industrial.jpg" },
    { name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å", description: "–ò–∑—ã—Å–∫–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", image: "/img/style-classic.jpg" }
  ]
  
  return styles.slice(0, 3)
}

export async function POST(request: NextRequest) {
  try {
    console.log('üé® Starting AI interior design generation...')
    
    const body = await request.json() as DesignGenerationRequest
    const { 
      prompt, 
      referenceImages = [],
      apartmentStyle = 'Modern',
      roomType = 'Living Room',
      design = '3D',
      designNew = 'No Design',
      budgetLevel = 'medium',
      budget = 15000,
      quality = 'standard',
      mode = 'generate'
    } = body
    
    console.log('üìù Request details:', { 
      promptLength: prompt?.length,
      originalUserPrompt: prompt?.substring(0, 50) + '...',
      hasReferenceImages: referenceImages.length > 0,
      apartmentStyle,
      roomType,
      design,
      designNew,
      budgetLevel,
      budget,
      quality,
      mode
    })
    
    if (!prompt || prompt.trim().length === 0) {
      return NextResponse.json(
        { error: 'Design description is required' },
        { status: 400 }
      )
    }

    let generatedImageUrl = ''
    let imageMetadata: any = {}

    // Create comprehensive DALL-E prompt using user's template
    const enhancedPrompt = createPremiumInteriorPrompt(prompt, apartmentStyle, roomType, budgetLevel, designNew, budget)
    console.log('üöÄ Using comprehensive DALL-E prompt (first 300 chars):', enhancedPrompt.substring(0, 300) + '...')

    try {
      // Generate image with Azure DALL-E 3
      const result = await generateWithAzureDalle(enhancedPrompt, quality)
      
      // Save image to local file system
      const timestamp = Date.now()
      const filename = `dalle3-${apartmentStyle.toLowerCase()}-${roomType.toLowerCase().replace(' ', '-')}-${timestamp}.png`
      
      const savedImageUrl = await saveImageToFile(result.imageUrl, filename)
      generatedImageUrl = savedImageUrl
      
      imageMetadata = {
        model: "azure-dall-e-3",
        mode: "generate",
        revisedPrompt: result.revisedPrompt,
        size: "1024x1024",
        quality: quality,
        style: "vivid",
        originalUrl: result.imageUrl
      }
      
      console.log('‚úÖ Image generation completed successfully!')
      console.log('üìÑ Revised prompt (first 100 chars):', result.revisedPrompt?.substring(0, 100) + '...')
      
    } catch (generateError) {
      console.error('‚ùå Azure DALL-E 3 generation failed:', generateError)
      
      return NextResponse.json(
        { 
          success: false,
          error: 'Failed to generate image with Azure DALL-E 3', 
          details: generateError instanceof Error ? generateError.message : 'Unknown error'
        },
        { status: 500 }
      )
    }

    // Generate additional content
    const furniture = generatePremiumFurniture(apartmentStyle, roomType, budgetLevel, prompt)
    const pinterestStyles = generateIntelligentPinterestStyles(apartmentStyle, prompt)

    // Calculate estimated cost
    const estimatedCost = quality === 'hd' ? '$0.08' : '$0.04'

    const response = {
      success: true,
      imageUrl: generatedImageUrl,
      furniture,
      pinterestStyles,
      threeDModel: null,
      metadata: {
        apartmentStyle,
        roomType,
        budgetLevel,
        quality,
        enhancedPrompt: enhancedPrompt.substring(0, 200) + '...',
        imageAnalysis: 'Professional interior design generated with Azure DALL-E 3',
        timestamp: new Date().toISOString(),
        hasReferenceImage: referenceImages.length > 0,
        originalPrompt: prompt,
        estimatedCost: estimatedCost,
        generationMode: 'azure-dalle3-generate',
        model: 'azure-dall-e-3',
        ...imageMetadata
      }
    }

    console.log('üéâ Design generation completed successfully!')
    return NextResponse.json(response)

  } catch (error) {
    console.error('üí• Error in design generation:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Failed to generate design', 
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
} 