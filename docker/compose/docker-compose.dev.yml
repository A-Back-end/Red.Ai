services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: redai_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-redai_dev}
      POSTGRES_USER: ${POSTGRES_USER:-redai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-redai_password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-redai_user} -d ${POSTGRES_DB:-redai_dev}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redai_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API (Development)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.backend
    container_name: redai_backend_dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-redai_user}:${POSTGRES_PASSWORD:-redai_password}@postgres:5432/${POSTGRES_DB:-redai_dev}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION:-2024-02-01}
      - BFL_API_KEY=${BFL_API_KEY:-}
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend App (Development)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfiles/Dockerfile.frontend
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY:-placeholder_for_build}
        - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test_YOUR_CLERK_PUBLISHABLE_KEY_HERE}
    container_name: redai_frontend_dev
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION:-2024-02-01}
      - BFL_API_KEY=${BFL_API_KEY:-}
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./app:/app/app
      - ./components:/app/components
      - ./lib:/app/lib
      - ./public:/app/public
      - ./utils:/app/utils
      - ./services:/app/services
      - ./pages:/app/pages
      - ./database:/app/database
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # AI Processing Service (Development)
  ai-processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.ai-processor
    container_name: redai_ai_processor_dev
    environment:
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION:-2024-02-01}
      - BFL_API_KEY=${BFL_API_KEY:-}
    volumes:
      - ./src/ai_models:/app/src/ai_models
      - ./backend:/app/backend
      - ./uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      replicas: 1

volumes:
  postgres_data_dev:
  redis_data_dev:

networks:
  default:
    name: redai_network_dev
    driver: bridge 