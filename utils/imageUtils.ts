import * as fs from 'fs'
import * as path from 'path'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
interface SaveImageResult {
  success: boolean
  localUrl?: string
  filename?: string
  error?: string
  storageType?: 's3' | 'local'
  s3Key?: string
  isPlaceholder?: boolean // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è placeholder
}



// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
interface Project {
  id: string
  userId: string
  name: string
  description: string
  imageUrl: string
  originalImageUrl?: string  // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  createdAt: Date | string
  updatedAt: Date | string
  status: string
  generatedImages: string[]
  budget: {
    min: number
    max: number
    currency: string
  }
  preferredStyles: string[]
  restrictions: string[]
  roomAnalysis?: any
  designRecommendation?: any
  threeDModel?: any
  pdfReport?: any
  shoppingList?: any
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (S3) –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
export async function downloadAndSaveImage(imageUrl: string, customFilename?: string): Promise<SaveImageResult> {
  try {
    console.log('üîÑ Starting image download process for:', imageUrl)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —É–∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º (–ª–æ–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ S3)
    if (imageUrl.startsWith('/generated-images/') || 
        imageUrl.startsWith('/uploads/') ||
        imageUrl.includes('amazonaws.com') ||
        imageUrl.includes('s3.') ||
        imageUrl.startsWith('https://') && !isTemporaryUrl(imageUrl)) {
      console.log('‚ÑπÔ∏è  Image is already permanent, skipping download')
      return {
        success: true,
        localUrl: imageUrl,
        filename: path.basename(imageUrl)
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
    console.log('üì• Using /api/save-image endpoint for storage...')
    
    const response = await fetch('/api/save-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageUrl: imageUrl,
        filename: customFilename
      })
    })

    if (!response.ok) {
      throw new Error(`Save API failed: ${response.statusText}`)
    }

    const result = await response.json()
    
    if (!result.success) {
      throw new Error(result.error || 'Failed to save image')
    }

        return {
      success: true,
      localUrl: result.localUrl,
      filename: result.filename,
      storageType: result.storageType,
      s3Key: result.s3Key
    }

  } catch (error) {
    console.error('‚ùå Error downloading image:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function readProjects(): Promise<Project[]> {
  try {
    const dbPath = path.join(process.cwd(), 'database', 'projects.json')
    const data = await fs.promises.readFile(dbPath, 'utf-8')
    return JSON.parse(data)
  } catch (error) {
    console.error('Error reading projects:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function writeProjects(projects: Project[]): Promise<void> {
  try {
    const dbPath = path.join(process.cwd(), 'database', 'projects.json')
    await fs.promises.writeFile(dbPath, JSON.stringify(projects, null, 2))
  } catch (error) {
    console.error('Error writing projects:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–æ–≤—ã–º –ª–æ–∫–∞–ª—å–Ω—ã–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function updateProjectWithLocalImage(projectId: string, originalUrl: string): Promise<boolean> {
  try {
    console.log('üîÑ Updating project with local image:', projectId)
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const saveResult = await downloadAndSaveImage(originalUrl)
    
    if (!saveResult.success) {
      console.error('‚ùå Failed to save image:', saveResult.error)
      return false
    }

    // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await readProjects()
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
    const projectIndex = projects.findIndex(p => p.id === projectId)
    if (projectIndex === -1) {
      console.error('‚ùå Project not found:', projectId)
      return false
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = projects[projectIndex]
    const oldImageUrl = project.imageUrl
    project.imageUrl = saveResult.localUrl!
    project.updatedAt = new Date().toISOString()

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ generatedImages
    if (project.generatedImages) {
      const imageIndex = project.generatedImages.findIndex(img => img === oldImageUrl)
      if (imageIndex !== -1) {
        project.generatedImages[imageIndex] = saveResult.localUrl!
      } else {
        project.generatedImages.push(saveResult.localUrl!)
      }
    } else {
      project.generatedImages = [saveResult.localUrl!]
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    await writeProjects(projects)
    
    console.log('‚úÖ Project updated successfully:', projectId)
    console.log('üìÇ Old URL:', oldImageUrl)
    console.log('üìÇ New URL:', saveResult.localUrl)
    
    return true

  } catch (error) {
    console.error('‚ùå Error updating project:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ URL
export async function updateAllProjectsWithLocalImages(): Promise<{ updated: number, failed: number }> {
  try {
    console.log('üîÑ Starting mass update of all projects...')
    
    const projects = await readProjects()
    let updated = 0
    let failed = 0

    for (const project of projects) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
      if (project.imageUrl && !project.imageUrl.startsWith('/generated-images/') && !project.imageUrl.startsWith('/uploads/')) {
        console.log(`üîÑ Processing project: ${project.id}`)
        
        const success = await updateProjectWithLocalImage(project.id, project.imageUrl)
        if (success) {
          updated++
        } else {
          failed++
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }

    console.log(`‚úÖ Mass update completed: ${updated} updated, ${failed} failed`)
    return { updated, failed }

  } catch (error) {
    console.error('‚ùå Error in mass update:', error)
    return { updated: 0, failed: 0 }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function checkImageUrlAccessibility(imageUrl: string): Promise<{ accessible: boolean; status?: number; error?: string }> {
  try {
    const response = await fetch(imageUrl, { method: 'HEAD' });
    return {
      accessible: response.ok,
      status: response.status
    };
  } catch (error) {
    return {
      accessible: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤—Ä–µ–º–µ–Ω–Ω—ã–º (–æ—Ç BFL.ai –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)
export function isTemporaryUrl(url: string): boolean {
  const temporaryDomains = [
    'delivery-us1.bfl.ai',
    'delivery-eu1.bfl.ai', 
    'bfl.ai',
    'temp-images',
    'generated-temp'
  ];
  
  return temporaryDomains.some(domain => url.includes(domain));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function handleExpiredImageUrl(imageUrl: string, projectId?: string): Promise<SaveImageResult> {
  console.log('üîÑ Handling expired image URL:', imageUrl);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
  const accessCheck = await checkImageUrlAccessibility(imageUrl);
  
  if (accessCheck.accessible) {
    console.log('‚úÖ Image URL is still accessible');
    return {
      success: true,
      localUrl: imageUrl,
      filename: path.basename(imageUrl)
    };
  }
  
  console.log(`‚ùå Image URL not accessible (status: ${accessCheck.status})`);
  
  // –ï—Å–ª–∏ —ç—Ç–æ BFL URL —Å 403 –æ—à–∏–±–∫–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å placeholder
  if (accessCheck.status === 403 && isTemporaryUrl(imageUrl)) {
    console.log('üîç Attempting to find local backup or create placeholder...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –ø–æ filename –∏–∑ URL
    const filename = path.basename(new URL(imageUrl).pathname) || `expired_${Date.now()}.png`;
    const localPaths = [
      `/generated-images/${filename}`,
      `/uploads/${filename}`,
      `/public/generated-images/${filename}`
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π
    for (const localPath of localPaths) {
      try {
        const fullPath = path.join(process.cwd(), 'public', localPath);
        await fs.promises.access(fullPath);
        console.log('‚úÖ Found local backup:', localPath);
        return {
          success: true,
          localUrl: localPath,
          filename: filename
        };
      } catch {
        // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º placeholder
    console.log('üìù Creating placeholder for expired image...');
    return {
      success: true,
      localUrl: '/img/placeholder-expired.jpg', // Fallback placeholder
      filename: filename,
      isPlaceholder: true
    };
  }
  
  return {
    success: false,
    error: `Image not accessible: ${accessCheck.status} ${accessCheck.error}`
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
export async function ensureImageIsSaved(imageUrl: string): Promise<string> {
  if (isTemporaryUrl(imageUrl)) {
    console.log('‚ö†Ô∏è  Detected temporary URL, saving locally...')
    const result = await downloadAndSaveImage(imageUrl)
    
    if (result.success && result.localUrl) {
      return result.localUrl
    } else {
      console.error('‚ùå Failed to save image, keeping original URL')
      return imageUrl
    }
  }
  
  return imageUrl
} 