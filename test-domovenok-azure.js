#!/usr/bin/env node

/**
 * üè† –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –î–æ–º–æ–≤—ë–Ω–∫–∞ —Å Azure OpenAI
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
 */

const fs = require('fs');
const path = require('path');

console.log('üè† === –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –î–æ–º–æ–≤—ë–Ω–∫–∞ —Å Azure OpenAI === üè†\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
    
    const envFile = path.join(process.cwd(), '.env.local');
    let envExists = fs.existsSync(envFile);
    
    console.log(`üìÅ .env.local —Ñ–∞–π–ª: ${envExists ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    const requiredVars = [
        'AZURE_OPENAI_API_KEY',
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ];
    
    if (envExists) {
        const envContent = fs.readFileSync(envFile, 'utf8');
        
        requiredVars.forEach(varName => {
            const hasVar = envContent.includes(varName);
            const hasPlaceholder = envContent.includes(`${varName}=your_`) || 
                                 envContent.includes(`${varName}=https://your-`) ||
                                 envContent.includes(`${varName}=AZURE_`);
            
            if (hasVar && !hasPlaceholder) {
                console.log(`üîë ${varName}: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
            } else if (hasVar) {
                console.log(`üîë ${varName}: ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è`);
            } else {
                console.log(`üîë ${varName}: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            }
        });
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint
async function testDomovenokAPI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–º–æ–≤–µ–Ω–∫–∞...\n');
    
    const testMessages = [
        {
            role: 'user',
            content: '–ü—Ä–∏–≤–µ—Ç, –î–æ–º–æ–≤—ë–Ω–æ–∫! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.'
        }
    ];
    
    const requestBody = {
        messages: testMessages,
        useAzure: true,
        assistantType: 'domovenok',
        data: {
            maxTokens: 1000,
            temperature: 0.7
        }
    };
    
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...');
        
        const response = await fetch('http://localhost:3000/api/azure-ai-chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });
        
        const result = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!\n');
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
            console.log(`ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${result.assistant || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`üîß –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`üß† –ú–æ–¥–µ–ª—å: ${result.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
            console.log(`üí¨ –û—Ç–≤–µ—Ç: ${result.message ? result.message.substring(0, 200) + '...' : '–ü—É—Å—Ç–æ–π'}`);
            
            if (result.usage) {
                console.log(`üìà –¢–æ–∫–µ–Ω—ã: ${result.usage.total_tokens || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:\n');
            console.log(`üö® –°—Ç–∞—Ç—É—Å: ${response.status}`);
            console.log(`üí¨ –û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            console.log(`üîç –î–µ—Ç–∞–ª–∏: ${result.details || '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'}`);
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:\n');
        console.log(`üö® –û—à–∏–±–∫–∞: ${error.message}`);
        console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–º–æ–≤–µ–Ω–∫–∞
function checkDomovenokConfig() {
    console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–º–æ–≤–µ–Ω–∫–∞...\n');
    
    const configFile = path.join(process.cwd(), 'components/aiAssistant/DomovenokConfig.ts');
    const componentFile = path.join(process.cwd(), 'components/dashboard/DomovenokAIAssistant.tsx');
    
    console.log(`üìÑ DomovenokConfig.ts: ${fs.existsSync(configFile) ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    console.log(`üìÑ DomovenokAIAssistant.tsx: ${fs.existsSync(componentFile) ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    if (fs.existsSync(componentFile)) {
        const componentContent = fs.readFileSync(componentFile, 'utf8');
        const hasAssistantType = componentContent.includes('assistantType: \'domovenok\'');
        console.log(`üéØ assistantType –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${hasAssistantType ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
function generateSetupInstructions() {
    console.log('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:\n');
    
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('');
    console.log('AZURE_OPENAI_API_KEY=your_actual_azure_api_key');
    console.log('AZURE_OPENAI_ENDPOINT=https://your-resource-name.openai.azure.com/');
    console.log('AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4');
    console.log('AZURE_OPENAI_API_VERSION=2024-05-01-preview');
    console.log('');
    console.log('3Ô∏è‚É£ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç Azure');
    console.log('4Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ endpoint URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /');
    console.log('5Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    console.log('6Ô∏è‚É£ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3000/dashboard');
    console.log('');
    console.log('üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: DOMOVENOK_AZURE_SETUP.md');
    console.log('');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        checkEnvironmentVariables();
        checkDomovenokConfig();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
        try {
            const healthCheck = await fetch('http://localhost:3000/api/check-status');
            if (healthCheck.ok) {
                await testDomovenokAPI();
            } else {
                console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev\n');
            }
        } catch {
            console.log('‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev\n');
        }
        
        generateSetupInstructions();
        
        console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('üè† –î–æ–º–æ–≤—ë–Ω–æ–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é! ‚ú®');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main(); 