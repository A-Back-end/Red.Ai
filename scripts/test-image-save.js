#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É API endpoint /api/save-image
 */

const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–æ–≤—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const testImages = [
  'https://picsum.photos/400/300', // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  'https://via.placeholder.com/400x300/FF0000/FFFFFF?text=Test+Image', // Placeholder
  'https://httpbin.org/image/png' // –ü—Ä–æ—Å—Ç–æ–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
];

async function testImageSave(imageUrl, testName) {
  console.log(`\nüß™ Testing: ${testName}`);
  console.log(`üì• URL: ${imageUrl}`);
  
  try {
    const response = await fetch('http://localhost:3000/api/save-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageUrl: imageUrl,
        filename: `test-${Date.now()}-${Math.random().toString(36).substring(2, 9)}.png`
      })
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ Success!');
      console.log(`   Local URL: ${result.localUrl}`);
      console.log(`   Filename: ${result.filename}`);
      console.log(`   Storage Type: ${result.storageType}`);
      console.log(`   File Size: ${result.fileSize} bytes`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (result.storageType === 'local') {
        const filePath = path.join(process.cwd(), 'public', result.localUrl);
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          console.log(`   File exists: ${stats.size} bytes`);
        } else {
          console.log('   ‚ö†Ô∏è  File does not exist on disk');
        }
      }
    } else {
      console.log('‚ùå Failed!');
      console.log(`   Status: ${response.status}`);
      console.log(`   Error: ${result.error}`);
      console.log(`   Details: ${result.details}`);
    }
  } catch (error) {
    console.log('‚ùå Network Error!');
    console.log(`   Error: ${error.message}`);
  }
}

async function runTests() {
  console.log('üöÄ Starting Image Save Tests...');
  console.log('=' .repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
  try {
    const healthCheck = await fetch('http://localhost:3000/api/health');
    if (!healthCheck.ok) {
      console.log('‚ùå Server is not running on localhost:3000');
      console.log('   Please start the server with: npm run dev');
      return;
    }
    console.log('‚úÖ Server is running');
  } catch (error) {
    console.log('‚ùå Cannot connect to server');
    console.log('   Please start the server with: npm run dev');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const saveDir = path.join(process.cwd(), 'public', 'generated-images');
  console.log(`üìÇ Save directory: ${saveDir}`);
  
  if (!fs.existsSync(saveDir)) {
    console.log('üìÅ Creating save directory...');
    fs.mkdirSync(saveDir, { recursive: true });
  }
  
  if (fs.existsSync(saveDir)) {
    console.log('‚úÖ Save directory exists and is writable');
  } else {
    console.log('‚ùå Cannot create save directory');
    return;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  for (let i = 0; i < testImages.length; i++) {
    await testImageSave(testImages[i], `Test ${i + 1}`);
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä Test Summary');
  console.log('=' .repeat(50));
  console.log('‚úÖ Tests completed');
  console.log(`üìÅ Check saved images in: ${saveDir}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error); 